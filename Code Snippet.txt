<ListBox.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="50"/>
                            <ColumnDefinition Width="50"/>
                        </Grid.ColumnDefinitions>
                        
                        
                    </Grid>
                </DataTemplate>
            </ListBox.ItemTemplate>




<Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{Binding Description}" />
                        <TextBlock Grid.Column="1" Text="{Binding Date}" />
                        <CheckBox Grid.Column="2"/>



<ListBox Grid.Row="2" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Margin="5" Name="listOfTasks">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        

                        
                    </Grid>
                </DataTemplate>
            </ListBox.ItemTemplate>
            
            
        </ListBox>



<Grid Grid.Row="2" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Margin="5">
            <DataGrid Name="dgUsers" AutoGenerateColumns="False">
                <DataGrid.Columns>

                    <DataGridTextColumn Header="Task" Binding="{Binding Name}" />
                    
                    <DataGridTemplateColumn Header="Birthday">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <DatePicker SelectedDate="{Binding Birthday}" BorderThickness="0" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                </DataGrid.Columns>
            </DataGrid>
        </Grid>



<Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBox Grid.Row="0" Text="{Binding TaskDesription}"/>
                <DatePicker Grid.Row="1" Name="taskDueDate"/>
                <CheckBox Grid.Row="2" />
                          
            </Grid>




<ListView Grid.Row="2" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Margin="5" Name="gridView_Tasks">
            <Grid>
                <DataGrid Name="dgTasks" AutoGenerateColumns="False">
                    <DataGrid.Columns>
                        <DataGridTextColumn Binding="{Binding Description}"/>
                        <DataGridTextColumn Binding="{Binding Date}" />
                        <DataGridCheckBoxColumn Binding="{Binding TaskComplete}" />
                    </DataGrid.Columns>
                </DataGrid>
            </Grid>
        </ListView>


<Grid Grid.Row="2" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Margin="5" Name="gridView_Tasks">
            <DataGrid Name="dgTasks" AutoGenerateColumns="False">
                <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding Description}" Width="Auto"/>
                    <DataGridTextColumn Binding="{Binding Date}" Width="50"/>
                    <DataGridCheckBoxColumn Binding="{Binding TaskComplete}" Width="50" />
                </DataGrid.Columns>
            </DataGrid>
        </Grid>





<Grid Grid.Row="2" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Margin="5" Name="gridView_Tasks">
            <DataGrid Name="dgTasks" AutoGenerateColumns="False">
                <DataGrid.Columns>



                    <DataGridTextColumn Binding="{Binding Description, Mode=TwoWay}" IsReadOnly="false" Width="*" x:Name="TaskDescr"/>
                    
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <DatePicker SelectedDate="{Binding Date}" BorderThickness="0" Width="Auto" Name="DueDate"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    
                    <DataGridCheckBoxColumn Binding="{Binding TaskComplete}" Width="Auto" x:Name="TaskComplete" />
                    
                </DataGrid.Columns>
            </DataGrid>
        </Grid>



<ListBox Name="lbTasks" HorizontalContentAlignment="Stretch" 
                 Grid.Row="2" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Margin="5"
                 SelectionChanged="lbTasks_SelectionChanged">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Column="0" Text="{Binding Description, Mode=TwoWay}" x:Name="TaskDescr"/>
                        <DatePicker Grid.Column="1" SelectedDate="{Binding Date}" x:Name="DueDate" SelectedDateChanged="selectDate_ChangedDate"/>
                        <CheckBox Grid.Column="2" IsChecked="{Binding TaskComplete}" x:Name="TaskComplete" Click="checkBox_CheckedChanged"/>
                    </Grid>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>




private void selectDate_ChangedDate(object sender, System.EventArgs e)
        {

        }

        private void checkBox_CheckedChanged(object sender, System.EventArgs e)
        {
            if (lbTasks.SelectedItem != null)
            {
                CheckBox chkBox = lbTasks.SelectedItem as CheckBox;

               

                if ((bool)chkBox.IsChecked)
                {
                    MessageBox.Show("The index of the row for the clicked cell is " + lbTasks.SelectedIndex);
                }
            }

        }



public void Add_Task(object sender, RoutedEventArgs e)
        {

        }

            /*public void Add_Task


                Task newTask = new Task();

                newTask.Description = taskInfo.Text;
                newTask.Date = Convert.ToString(dueDate.SelectedDate);
                newTask.TaskComplete = false;

                Task_ListBoxItems.Add(newTask);

                lbTasks.ItemsSource = Task_ListBoxItems;


            }*/











public class Task
    {
        private string _taskDescription;
        private string _taskDueDate;
        private bool _isComplete;
        private bool _isValidTask;

        public event PropertyChangedEventHandler PropertyChanged;



        public string TaskDescription
        {
            get
            {
                return _taskDescription;
            }
            set
            {
                if(_taskDescription != value)
                {
                    _taskDescription = value;
                    OnPropertyChanged();
                    SetIsValid();

                }
            }
        }

        public string TaskDueDate
        {
            get
            {
                return _taskDueDate;
            }
            set
            {
                _taskDueDate = value;
                OnPropertyChanged();
                SetIsValid();
            }
        }

        public bool IsValidTask
        {
            get
            {
                return _isValidTask;
            }
            set
            {
                if (_isValidTask != value)
                {
                    _isValidTask = value;
                    OnPropertyChanged();
                }
            }
        }



        private void SetIsValid()
        {
            IsValidTask = !string.IsNullOrEmpty(TaskDescription) && !string.IsNullOrEmpty(TaskDueDate);
        }

        private void OnPropertyChanged([CallerMemberName] string propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }




 ObservableCollection<Task> Task_ListBoxItems = new ObservableCollection<Task>();

        

        private void ListBoxTasksItemChanged(object sender, RoutedEventArgs e)
        {
            if (lbTasks.SelectedItem != null)
            {

               

                //string curItem = lbTasks.SelectedItem.ToString();
                MessageBox.Show("The index of the row for the clicked cell is " + sender.ToString());


            }
                //MessageBox.Show("The index of the row for the clicked cell is " + lbTasks.SelectedIndex);

        }





 private SimpleEditableTask _NewTask;
        
        public SimpleEditableTask NewTask
        {
            get { return _NewTask; }
            set { SetProperty(ref _NewTask, value); }
        }

        private TaskModel _editingTask = null;

        public void SetTask(TaskModel task)
        {
            _editingTask = task;

            if(NewTask != null) NewTask.ErrorsChanged -= RaiseCanExecuteChanged;
            NewTask = new SimpleEditableTask();
            NewTask.ErrorsChanged += RaiseCanExecuteChanged;
            CopyTask(task, NewTask);

        }

        private void CopyTask(TaskModel task, SimpleEditableTask newTask)
        {
            throw new NotImplementedException();
        }

        private void RaiseCanExecuteChanged(object sender, DataErrorsChangedEventArgs e)
        {
            AddCommand.Ra
        }

        /// <summary>
        /// This event declaration is to be used to track a existing task entry
        /// This event is attached to each of the new entries
        /// </summary>


        private bool _EditStatus;

        public bool EditStatus
        {
            get { return _EditStatus; }
            set { SetProperty(ref _EditStatus, value); }
        }



        public ICommand AddCommand { get; private set; }
        public AddEditTaskViewModel()
        {
            AddCommand = new DelegateCommand(OnAdd, CanAdd);
        }


       
        private void OnAdd()
        {
            UpdateTask();
        }

        private void UpdateTask(SimpleEditableTask source, Task target)
        {

        }



        private bool CanAdd()
        {

            throw new NotImplementedException();
        }



<Text="{Binding NewTask.TaskInfo, Mode=TwoWay,ValidatesOnDataErrors=true,UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"


/*private Task _editingTask = null;

        public void SetTask(Task nTask)
        {
            _editingTask = nTask;

            if (NewTask != null) NewTask.ErrorsChanged -= RaiseCanExecuteChanged;
            NewTask = new SimpleEditableTask();
            NewTask.ErrorsChanged += RaiseCanExecuteChanged;
            CopyCustomer(nTask, NewTask);
        }


        private void UpdateCustomer(SimpleEditableTask source, Task target)
        {
            target.TaskInfo = source.TaskInfo;
            target.TaskDueDate = source.TaskDueDate;
            target.TaskIsComplete = false;
        }

        private void CopyCustomer(Task source, SimpleEditableTask target)
        {
            target.Id = source.Id;

            if (EditMode)
            {
                target.TaskInfo = source.TaskInfo;
                target.TaskDueDate = source.TaskDueDate;
                target.TaskIsComplete = source.TaskIsComplete;
            }
        }

        private void RaiseCanExecuteChanged(object sender, EventArgs e)
        {
            AddCommand.RaiseCanExecuteChanged();
        }*/



        /// <summary>
        /// Handles the AddCommand, will need to be triggered once text is entered into the textbox
        /// </summary>


        /*public ICommand _addCommand { get; private set; }

        public ICommand AddCommand
        {
            get
            {
                if(_addCommand == null)
                {
                    _addCommand = new RelayCommand(
                        param => this.AddTask(),
                        param => this.CanAddTask()
                    );
                }
            }

        }*/ //= new TaskICommand(AddTask, CanAddTask);



/*if(value == _selectedTask)
                    return;

                SetProperty(ref _selectedTask, value);*/

                //MessageBox.Show("This action is getting reached!");

                /*MessageBox.Show(_selectedTask.TaskInfo);
                if(_selectedTask.TaskInfo == "")
                {
                    
                    Tasks.Remove(value);
                }*/


<!-- SelectedItem = "{Binding SelectedTask}" -->


DataType = "{x:Type data:EditableTask}"


<Style TargetType="{x:Type ListBoxItem}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=TaskDueDate}" Value="A">
            </Style.Triggers>
        </Style>



<UserControl.Resources>
        <DataTemplate DataType = "{x:Type data:EditableTask}">
            <Grid>
                <!--<Grid.InputBindings>
                    <MouseBinding MouseAction="LeftClick" Command="{Binding EditCommand}" CommandParameter="{Binding ElementName=lbTasks, Path=SelectedItem}" />
                    <MouseBinding MouseAction="LeftClick" Command="{Binding EditCommand}" CommandParameter="{Binding ElementName=lbTasks, Path=SelectedItem}" />
                </Grid.InputBindings>-->


                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBlock Grid.Column="0" Text="{Binding Path=TaskInfo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="TaskDescr"/>
                <DatePicker Grid.Column="1" SelectedDate="{Binding Path=TaskDueDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="DueDate" />
                <CheckBox Grid.Column="2" IsChecked="{Binding Path=TaskIsComplete, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="TaskComplete"/>

                <!-- <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonUp"
                </i:Interaction.Triggers> -->
            </Grid>
        </DataTemplate>

        
    </UserControl.Resources>



<DataTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>


                        


                    </MultiDataTrigger.Conditions>
                </MultiDataTrigger>
            </DataTemplate.Triggers>



<ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding  TaskStatusBoolean, Mode=OneWay}" Value="True">
                            <Setter Property="Background" Value="Red" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ListBox.ItemContainerStyle>



<CheckBox.ContentTemplate>
                        <DataTemplate>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=Tag}" Value="True">
                                    
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </CheckBox.ContentTemplate>