Creating the project:

https://docs.microsoft.com/en-us/visualstudio/get-started/csharp/tutorial-wpf?view=vs-2019

Git cmds
https://www.softwarelab.it/2018/10/12/adding-an-existing-project-to-github-using-the-command-line/
Error with db file locked
https://stackoverflow.com/questions/47460039/vs-2017-git-local-commit-db-lock-error-on-every-commit/47472811

WPS api
https://docs.microsoft.com/en-us/dotnet/framework/wpf/


Design:


Top left allows you to exit for redundancy

Every you add an item, it'll display as a label with the description of the task, a label of the date its due, and a checkbox when clicked, turns the task green.

There is a way you can create a separate XAML component such that you can call the object, fill the object with the info, and insert the instance of that object into the lsit box.

Mostly 



Refer to this website:

https://www.tutorialspoint.com/mvvm/mvvm_first_application.htm

//////////////////////////////////////////////////////////////////////////

<Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>


        <Menu Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3">
            <MenuItem Header="_File">
                <MenuItem Header="_New task"/>
                <MenuItem Header="_Exit" />
            </MenuItem>

            <MenuItem Header="_Date">

            </MenuItem>
        </Menu>

        <Label Grid.Row="0" Grid.Column="1" Name="todaysDate" />

        <TextBox Grid.Row="1" Grid.Column="0" Margin="5" Name="taskInfo"/>

        <DatePicker Grid.Row="1" Grid.Column="1" Margin="5" Name="dueDate"/>

        <Button Grid.Row="1" Grid.Column="2" Margin="5">Add</Button>



        <ListBox Name="lbTasks" HorizontalContentAlignment="Stretch" 
                 Grid.Row="2" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Margin="5">
            <ListBox.ItemTemplate>
                <DataTemplate x:Key ="taskTemplate" >
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Column="0" Text="{Binding taskDescription, Mode=TwoWay}" x:Name="TaskDescr"/>
                        <DatePicker Grid.Column="1" SelectedDate="{Binding taskDueDate, Mode=TwoWay}" x:Name="DueDate" />
                        <CheckBox Grid.Column="2" IsChecked="{Binding isComplete, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="TaskComplete"/>
                    </Grid>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>









    </Grid>






public event EventHandler CanExecuteChanged;

        public bool CanExecute(object parameter)
        {
            throw new NotImplementedException();
        }

        public void Execute(object parameter)
        {
            throw new NotImplementedException();
        }



Figure out a way to make the data bindable in the template in such a way that it has its own unique data structure on when it changes.
When the data changes, I can do a more comprehansive change in the list such that a specific item becomes green when check mark is done, and red when the due date has passed.